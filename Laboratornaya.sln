using System;
using System.Collections.Generic;

class Pupil
{
    public virtual int GetCurrentGrade
    {
        get
        {
            Random random = new Random();
            return random.Next(2, 6);
        }
    }

    public virtual void Study() { Console.WriteLine("Учится."); }
    public virtual void Read() { Console.WriteLine("Читает."); }
    public virtual void Write() { Console.WriteLine("Пишет."); }
    public virtual void Relax() { Console.WriteLine("Отдыхает."); }
}

class ExcellentPupil : Pupil
{
    public override int GetCurrentGrade
    {
        get
        {
            Random random = new Random();
            return random.Next(4, 6);
        }
    }

    public override void Study() { Console.WriteLine("Учится отлично."); }
    public override void Read() { Console.WriteLine("Читает много."); }
    public override void Write() { Console.WriteLine("Пишет отлично."); }
    public override void Relax() { Console.WriteLine("Отдыхает редко."); }
}

class GoodPupil : Pupil
{
    public override int GetCurrentGrade
    {
        get
        {
            Random random = new Random();
            return random.Next(3, 6);
        }
    }

    public override void Study() { Console.WriteLine("Учится хорошо."); }
    public override void Read() { Console.WriteLine("Читает достаточно."); }
    public override void Write() { Console.WriteLine("Пишет хорошо."); }
    public override void Relax() { Console.WriteLine("Отдыхает умеренно."); }
}

class BadPupil : Pupil
{
    public override int GetCurrentGrade
    {
        get
        {
            Random random = new Random();
            return random.Next(2, 4);
        }
    }

    public override void Study() { Console.WriteLine("Учится плохо."); }
    public override void Read() { Console.WriteLine("Читает редко."); }
    public override void Write() { Console.WriteLine("Пишет плохо."); }
    public override void Relax() { Console.WriteLine("Отдыхает много."); }
}

class ClassRoom
{
    private static int numberOfPupils = 0;
    public static int NumberOfPupils { get { return numberOfPupils; } }

    private List<Pupil> pupils = new List<Pupil>();

    public ClassRoom(params Pupil[] initialPupils)
    {
        for (int i = 0; i < 4; i++)
        {
            if (i < initialPupils.Length)
            {
                pupils.Add(initialPupils[i]);
                numberOfPupils++;
            }
            else
            {
                pupils.Add(new Pupil());
                numberOfPupils++;
            }
        }
    }

    public void DisplayPupils()
    {
        foreach (var pupil in pupils)
        {
            if (pupil != null)
            {
                pupil.Study();
                pupil.Read();
                pupil.Write();
                pupil.Relax();
                Console.WriteLine($"Текущая оценка: {pupil.GetCurrentGrade}");
            }
        }
    }

    public double GetRoundGrade()
    {
        double total = 0;
        foreach (var pupil in pupils)
        {
            total += pupil.GetCurrentGrade;
        }
        return total / pupils.Count;
    }
}

class Program
{
    static void Main()
    {
        ClassRoom classRoom = new ClassRoom(new ExcellentPupil(), new GoodPupil(), new BadPupil());
        classRoom.DisplayPupils();
        Console.WriteLine("Средняя оценка: " + classRoom.GetRoundGrade());
        Console.WriteLine("Количество учеников: " + ClassRoom.NumberOfPupils);
    }
}
